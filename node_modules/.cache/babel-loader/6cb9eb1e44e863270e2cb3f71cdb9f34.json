{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst sha256 = async message => {\n  // encode as UTF-8\n  const msgBuffer = new TextEncoder().encode(message); // hash the message\n\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer); // convert ArrayBuffer to Array\n\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert bytes to hex string\n\n  const hashHex = hashArray.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hashHex;\n};\n\nvar basePath = process.env.REACT_APP_API_NODE;\nvar basePathToken = process.env.EC2_TOKEN;\n\nasync function callApiBearer(shaGenerated, surveyId, fetchWithBQ) {\n  const randomResult = await fetchWithBQ(`/${shaGenerated}`);\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer \" + randomResult.data.access_token\n  };\n  const result = await fetchWithBQ({\n    url: `${basePath}/survey/${surveyId}`,\n    method: \"GET\",\n    headers\n  });\n  return result.data ? {\n    data: result.data\n  } : {\n    error: result.error\n  };\n}\n\nexport const surveyApi = createApi({\n  reducerPath: \"surveyApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:4000/token\"\n  }),\n  endpoints: build => ({\n    fetchSurvey: build.query({\n      async queryFn(surveyId, _queryApi, _extraOptions, fetchWithBQ) {\n        let ts = Date.now();\n        let date_ob = new Date(ts);\n        return sha256(\"OpenM1nd@2022\" + date_ob.getDay()).then(res => {\n          return callApiBearer(res, surveyId, fetchWithBQ);\n        });\n      }\n\n    })\n  })\n});\nexport const {\n  useFetchSurveyQuery\n} = surveyApi;\nexport const surveyDemographicApi = createApi({\n  reducerPath: \"surveyDemopraphicApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: basePath\n  }),\n  endpoints: builder => ({\n    fetchSurveyDemographic: builder.query({\n      query: _ref => {\n        let {\n          codProyecto,\n          codUser\n        } = _ref;\n        return {\n          url: `/${codProyecto}/demographics/${codUser}`,\n          method: \"GET\"\n        };\n      }\n    }),\n    addNewPost: builder.mutation({\n      query: payload => ({\n        url: \"/demographics\",\n        method: \"POST\",\n        body: payload,\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }),\n      invalidatesTags: [\"Post\"]\n    })\n  })\n});\nexport const {\n  useFetchSurveyDemographicQuery,\n  useAddNewPostMutation\n} = surveyDemographicApi;\nexport const surveyQuestionsApi = createApi({\n  reducerPath: \"surveyQuestionsApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: basePath\n  }),\n  endpoints: builder => ({\n    fetchSurveyQuestions: builder.query({\n      query: _ref2 => {\n        let {\n          idProyecto,\n          codUser,\n          page,\n          size\n        } = _ref2;\n        return {\n          url: `/${idProyecto}/questions/${codUser}/${page}/${size}`,\n          method: \"GET\"\n        };\n      }\n    }),\n    addNewAnswer: builder.mutation({\n      query: payload => ({\n        url: \"/questions\",\n        method: \"POST\",\n        body: payload,\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }),\n      invalidatesTags: [\"Post\"]\n    })\n  })\n});\nexport const {\n  useFetchSurveyQuestionsQuery,\n  useAddNewAnswerMutation\n} = surveyQuestionsApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","sha256","message","msgBuffer","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashHex","map","b","toString","padStart","join","basePath","process","env","REACT_APP_API_NODE","basePathToken","EC2_TOKEN","callApiBearer","shaGenerated","surveyId","fetchWithBQ","randomResult","headers","Authorization","data","access_token","result","url","method","error","surveyApi","reducerPath","baseQuery","baseUrl","endpoints","build","fetchSurvey","query","queryFn","_queryApi","_extraOptions","ts","Date","now","date_ob","getDay","then","res","useFetchSurveyQuery","surveyDemographicApi","builder","fetchSurveyDemographic","codProyecto","codUser","addNewPost","mutation","payload","body","invalidatesTags","useFetchSurveyDemographicQuery","useAddNewPostMutation","surveyQuestionsApi","fetchSurveyQuestions","idProyecto","page","size","addNewAnswer","useFetchSurveyQuestionsQuery","useAddNewAnswerMutation"],"sources":["/Users/heralvarado/Documents/Personal/Openmind/opencardsweb/visualvoicescard/src/redux/api/survey.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nconst sha256 = async (message) => {\n  // encode as UTF-8\n  const msgBuffer = new TextEncoder().encode(message);\n  // hash the message\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgBuffer);\n  // convert ArrayBuffer to Array\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  // convert bytes to hex string\n  const hashHex = hashArray\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n  return hashHex;\n};\n\nvar basePath = process.env.REACT_APP_API_NODE;\nvar basePathToken = process.env.EC2_TOKEN;\n\nasync function callApiBearer(shaGenerated, surveyId, fetchWithBQ) {\n  const randomResult = await fetchWithBQ(`/${shaGenerated}`);\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Authorization: \"Bearer \" + randomResult.data.access_token,\n  };\n\n  const result = await fetchWithBQ({\n    url: `${basePath}/survey/${surveyId}`,\n    method: \"GET\",\n    headers,\n  });\n\n  return result.data ? { data: result.data } : { error: result.error };\n}\n\nexport const surveyApi = createApi({\n  reducerPath: \"surveyApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:4000/token\" }),\n  endpoints: (build) => ({\n    fetchSurvey: build.query({\n      async queryFn(surveyId, _queryApi, _extraOptions, fetchWithBQ) {\n        let ts = Date.now();\n        let date_ob = new Date(ts);\n        return sha256(\"OpenM1nd@2022\" + date_ob.getDay()).then((res) => {\n          return callApiBearer(res, surveyId, fetchWithBQ);\n        });\n      },\n    }),\n  }),\n});\nexport const { useFetchSurveyQuery } = surveyApi;\n\nexport const surveyDemographicApi = createApi({\n  reducerPath: \"surveyDemopraphicApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: basePath }),\n  endpoints: (builder) => ({\n    fetchSurveyDemographic: builder.query({\n      query: ({ codProyecto, codUser }) => ({\n        url: `/${codProyecto}/demographics/${codUser}`,\n        method: \"GET\",\n      }),\n    }),\n    addNewPost: builder.mutation({\n      query: (payload) => ({\n        url: \"/demographics\",\n        method: \"POST\",\n        body: payload,\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      }),\n      invalidatesTags: [\"Post\"],\n    }),\n  }),\n});\nexport const { useFetchSurveyDemographicQuery, useAddNewPostMutation } =\n  surveyDemographicApi;\n\nexport const surveyQuestionsApi = createApi({\n  reducerPath: \"surveyQuestionsApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: basePath }),\n  endpoints: (builder) => ({\n    fetchSurveyQuestions: builder.query({\n      query: ({ idProyecto, codUser, page, size }) => ({\n        url: `/${idProyecto}/questions/${codUser}/${page}/${size}`,\n        method: \"GET\",\n      }),\n    }),\n    addNewAnswer: builder.mutation({\n      query: (payload) => ({\n        url: \"/questions\",\n        method: \"POST\",\n        body: payload,\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      }),\n      invalidatesTags: [\"Post\"],\n    }),\n  }),\n});\nexport const { useFetchSurveyQuestionsQuery, useAddNewAnswerMutation } =\n  surveyQuestionsApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}